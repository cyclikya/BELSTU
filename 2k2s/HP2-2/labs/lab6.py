import sqlite3
from datetime import datetime, timedelta
import telebot
from telebot import types
import matplotlib.pyplot as plt
import pandas as pd
from io import BytesIO

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7384071048:AAGtuQ0NjS5k8ZF3t-n4jvBTzzT-DLq2OSs"
bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('mood_diary.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS moods (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        mood_score INTEGER NOT NULL,
        note TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    conn.commit()
    conn.close()

init_db()

# –ö–æ–º–∞–Ω–¥–∞ /start –∏ /help
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_text = """
üåü <b>–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</b> üåü

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start –∏–ª–∏ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é
/export - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV
"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å'),
        types.KeyboardButton('üìú –ò—Å—Ç–æ—Ä–∏—è'),
        types.KeyboardButton('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö')
    )
    bot.send_message(message.chat.id, help_text, parse_mode='HTML', reply_markup=markup)

@bot.message_handler(content_types=['sticker'])
def handle_sticker(message):
    bot.send_message(message.chat.id, "üòä –ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    
    if message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' or message.text == '/stats':
        show_stats_week(message)
    elif message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' or message.text == '/add':
        ask_mood_score(message)
    elif message.text == 'üìú –ò—Å—Ç–æ—Ä–∏—è' or message.text == '/history':
        show_history_week(message)
    elif message.text == 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö' or message.text == '/export':
        export_data(message)
    else:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

# –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
def ask_mood_score(message):
    markup = types.InlineKeyboardMarkup()
    for i in range(1, 11):
        markup.add(types.InlineKeyboardButton(str(i), callback_data=f"mood_{i}"))
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –æ—Ç 1 –¥–æ 10?", reply_markup=markup)

# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data.startswith('mood_'):
        mood_score = int(call.data.split('_')[1])
        msg = bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {mood_score}. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ –µ—ë –∏–ª–∏ '–Ω–µ—Ç'.")
        bot.register_next_step_handler(msg, lambda m: save_mood_with_note(m, call.from_user.id, mood_score))
    elif call.data.startswith('delete_'):
        record_id = int(call.data.split('_')[1])
        delete_record(call.message, record_id)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
def save_mood_with_note(message, user_id, mood_score):
    note = message.text if message.text.lower() != '–Ω–µ—Ç' else None
    conn = sqlite3.connect('mood_diary.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO moods (user_id, mood_score, note) VALUES (?, ?, ?)', (user_id, mood_score, note))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {mood_score}" + (f"\n–ó–∞–º–µ—Ç–∫–∞: {note}" if note else ""))

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
def show_stats_week(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('mood_diary.db')
    cursor = conn.cursor()
    since = datetime.now() - timedelta(days=7)
    cursor.execute('SELECT mood_score, timestamp FROM moods WHERE user_id = ? AND timestamp >= ? ORDER BY timestamp', (user_id, since))
    rows = cursor.fetchall()
    conn.close()

    if rows:
        df = pd.DataFrame(rows, columns=['mood_score', 'timestamp'])
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        avg_score = df['mood_score'].mean()
        min_score = df['mood_score'].min()
        max_score = df['mood_score'].max()
        count = len(df)

        plt.figure(figsize=(10, 5))
        plt.plot(df['timestamp'], df['mood_score'], marker='o')
        plt.title('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–û—Ü–µ–Ω–∫–∞')
        plt.ylim(0, 10)
        plt.grid(True)

        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()

        caption = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>

–°—Ä–µ–¥–Ω–µ–µ: {avg_score:.2f}
–ú–∏–Ω–∏–º—É–º: {min_score}
–ú–∞–∫—Å–∏–º—É–º: {max_score}
–ó–∞–ø–∏—Å–µ–π: {count}
"""
        bot.send_photo(message.chat.id, buf, caption=caption, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "üòï –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
def show_history_week(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('mood_diary.db')
    cursor = conn.cursor()
    since = datetime.now() - timedelta(days=7)
    cursor.execute('SELECT id, mood_score, note, timestamp FROM moods WHERE user_id = ? AND timestamp >= ? ORDER BY timestamp DESC', (user_id, since))
    rows = cursor.fetchall()
    conn.close()

    if rows:
        bot.send_message(message.chat.id, "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:</b>", parse_mode='HTML')
        for idx, (record_id, score, note, timestamp) in enumerate(rows, 1):
            timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
            text = f"{idx}. <b>{timestamp}</b> ‚Äî –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {score}/10"
            if note:
                text += f"\n   –ó–∞–º–µ—Ç–∫–∞: {note}"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{record_id}"))
            bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "üòï –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
def delete_record(message, record_id):
    user_id = message.from_user.id
    conn = sqlite3.connect('mood_diary.db') 
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM moods WHERE id = ? AND user_id = ?', (record_id, user_id))
    if cursor.fetchone():
        cursor.execute('DELETE FROM moods WHERE id = ?', (record_id,))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    conn.close()

# –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
def export_data(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('mood_diary.db')
    df = pd.read_sql_query('SELECT mood_score, note, timestamp FROM moods WHERE user_id = ? ORDER BY timestamp', conn, params=(user_id,))
    conn.close()

    if not df.empty:
        buf = BytesIO()
        df.to_csv(buf, index=False, encoding='utf-8')
        buf.seek(0)
        bot.send_document(message.chat.id, ('mood_history.csv', buf), caption="üì§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV")
    else:
        bot.send_message(message.chat.id, "üòï –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
